<div class="container-fluid">
  <div class="row">
    <div class="col-sm-3 col-md-2 sidebar">
      <ul class="nav nav-sidebar" margin-top=20px>
        <li><a href="/intro">Introduction</a></li>
        <li><a href="/basicsyntax">Basic Syntax</a></li>
        <li><a href="/api">API Integration</a></li>
        <li class="active"><a href="/interactive">Interactive Charts<span class="sr-only">(current)</span></a></li>
        <li><a href="/interactiveapi">Interactive API Example</a></li>
      </ul>
    </div>
    <div class="col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main">
      <h1 class="page-header">Interactive Charts</h1>
      <p>Now that we have charts that display information, what if we want to modify them? In this section we will
      briefly look at how to create a chart that can be modified via a pair of buttons. One button will decrease
      the size of our ColumnChart, while the other will grow it. We will also briefly touch on how these actions
      can be animated, to provide a slick look to the UI.</p>
      
      <h2 class="page-header">Creating an Interactive Chart</h2>
      <h3 class="page-header">The HTML</h3>
      <p>The first step to creating our Google Chart that will adjust to user interaction, is adding the necessary HTML.
      As seen below in the code snippet, in addition to the standard div for displaying the chart, a pair of buttons have
      been added. These buttons will be referenced by the javascript that creates the Google Chart, and will enable
      the user interaction.</p>
      <pre class="prettyprint lang-html linenums">
        &ltdiv id="interactive_chart"&gt&lt/div&gt
        &ltbutton id="button_down"&gtDown&lt/button&gt
        &ltbutton id="button_up"&gtUp&lt/button&gt
      </pre>
      
      <h3 class="page-header">The Javascript</h3>
      <p>Now that the minor HTML portion is out of the way, we can get to the meat and potatoes of this interactivity meal. 
      The javascript builds upon what we already know about Google Charts, but adds in some other syntax. I've provided the
      entire javascript code sample below, but just like previous sections, I'm going to walk through the changes line by line.</p>
      <pre class="prettyprint lang-js linenums">
        google.charts.load('current', {packages: ['corechart']});
        google.charts.setOnLoadCallback(init);

        // Wrapped code in init() function. Called by the Google Charts call back function
        function init() {
          var data = new google.visualization.arrayToDataTable([
            ['Candy', 'Count'],
            ['Skittles', 250]
          ]);

          /* Moved data, options, button, and chart decleration outside of drawChart, because drawChart will be called 
          multiple times. These variables should stay constant unless modified by our buttons */
          var options = {title:'Skittles I Want to Eat',
                         width:450,   // Width of chart
                         height:450,  // Height of chart
                         // Necessary to create animations when changing values
                         animation: {
                            duration: 1000, // in ms
                            easing: 'out' // Start fast then slow down on animation
                         },
                         backgroundColor: {strokeWidth:3}};  // Put a border around the chart

          var chart = new google.visualization.ColumnChart(document.getElementById('interactive_chart'));
          var upButton = document.getElementById('button_up');
          var downButton = document.getElementById('button_down');

          function drawChart() {
            // Can't push buttons while chart draws
            upButton.disable = true;
            downButton.disable = true;
            // Listen for the chart to finish loading, then enable buttons
            google.visualization.events.addListener(chart, 'ready', function() {
              upButton.disable = false;
              downButton.disable = false;
            });
            chart.draw(data, options);
          }

          // Add listener that modifies chart value when up button clicked
          upButton.onclick = function() {
            if (data.getValue(0, 1) < 10000) {
              var newCount = data.getValue(0, 1) + 50;
              data.setValue(0, 1, newCount);
              drawChart();
            }
          }

          // Add listener that modifies chart values when down button clicked
          downButton.onclick = function() {
            if (data.getValue(0, 1) > 0) {
              var newCount = data.getValue(0, 1) - 50;
              data.setValue(0, 1, newCount);
              drawChart();
            }
          }

          // Initial call to drawChart() when page loads
          drawChart();
        }
      </pre>
      
      <div id="interactive_chart"></div>
      <button id="button_down">Down</button>
      <button id="button_up">Up</button>
      <br />
      <p><a href="/interactiveapi">Interactive API Example</a><p>
    </div>
  </div>
</div>
