<div class="container-fluid">
  <div class="row">
    <div class="col-sm-3 col-md-2 sidebar">
      <ul class="nav nav-sidebar" margin-top=20px>
        <li><a href="/intro">Introduction</a></li>
        <li class="active"><a href="/basicsyntax">Basic Syntax <span class="sr-only">(current)</span></a></li>
        <li><a href="/api">API Integration</a></li>
        <li><a href="/interactive">Interactive Charts</a></li>
        <li><a href="/interactiveapi">Interactive API Example</a></li>
      </ul>
    </div>
    <div class="col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main">
      <h1 class="page-header">Basic Syntax for Google Charts</h1>
      <p>Jumping straight into API integration and chart interactivity will not go smoothly without a 
      a brief understanding of the overall Google Chart API. In this section, I will be walking you 
      through the creation of a simple pie chart. This will involve loading the API, organizing some data,
      selecting some options, and finally drawing the chart. In the end, you will have the tools to create
      the simple pie chart displayed below.</p>
      <div id="food_chart">
      </div>
      <h2 class="sub-header">Breaking Down the Code</h2>
      <p>I'm going to start by providing all of the code used to produce the chart above.</p>
      <h4 class="sub-header">Javascript to be placed in HTML header</h4>
      <pre class="prettyprint lang-js linenums">
        /* Basic chart preperation files that must be included. 
        For different chart types additional packages must be added.
        For older versions of Google Chart releases, 'current' must be changed */
        google.charts.load('current', {packages: ['corechart']});

        /* This defines the "call back" function once the page loads
        Change drawChart to the function you create */
        google.charts.setOnLoadCallback(drawChart);

        /* This controls all of the main functionality of the chart. 
        You will organize your data, select your chart options, and draw 
        the chart using this function */
        function drawChart() {

          // Create the data you want to include in your chart
          var data = new google.visualization.arrayToDataTable([
            ['Restaurant', 'Count'],
            ['Tutta Bella', 1],
            ['Sushi Mio', 3],
            ['Chipotle', 7],
            ['Thai Truck', 5],
            ['Jimmy Johns', 2],
            ['Chic-fil-a', 11]
          ]);

          // Set options for how the chart will be displayed
          var options = {title:'Places I Have Eaten Lunch This Month',
                         width:450,   // Width of chart
                         height:300,  // Height of chart
                         backgroundColor: {strokeWidth:3}}  // Put a border around the chart

          /* This line does several things:
          1) Creates a Google Chart and assigns it to a variable
          2) Designates the chart type (PieChart in this case)
          3) Indicates which HTML element will display the chart (food_chart in this case) */
          var chart = new google.visualization.PieChart(document.getElementById('food_chart'));
          
          // This line draws the chart using the data and options designated above
          chart.draw(data, options);
        }
      </pre>
      <h4 class="sub-header">HTML needed in body (really, that is it)</h4>
      <pre class="prettyprint lang-html linenums">
        &ltdiv id="food_chart"&gt
        &lt/div&gt
      </pre>
      
      <p><a href="https://developers.google.com/chart/interactive/docs/">Google's Guide</a> provides details
      on how to get Google Charts up and running, along with detailed explanations of all the features, options,
      and chart types.</p>
      <p>While this guide is going to provide the basic details of how to get a chart running in the first two 
      sections (hopefully more succently than Google's documentation), the guide is primarily going to focus on 
      two important areas:<p>
      <ul>
        <li><a href="/api">Charting API Data</a></li>
        <li><a href="/interactive">Creating Interactive Charts</a></li>
      </ul>
      <p>This guide will also be created using Express, Express-Handlebars, Express-Request, and Express-Async. 
      This adds further complexity beyond the client side calls the Google Chart API demonstrates. This will be 
      useful for creating server side code that can leverage databases, APIs, and other non-client side generated
      charts. Hopefully with the tools demonstrated in this guide you will be ready to create a workout dashboard,
      finance application, or maybe even a pick-up line success tracker (see example chart below).</p>
      <div id="basic_chart">
      </div>
      <p><br />And just in case you wanted to see the underlying javascript for this chart... (HOW SIMPLE!)</p>
      <pre class="prettyprint lang-js linenums">
          google.charts.load('current', {packages: ['corechart']});
          google.charts.setOnLoadCallback(drawChart);

          function drawChart() {
            var data = new google.visualization.arrayToDataTable([
              ['Line', 'Percentage', {role: 'style'}],
              ['Girl, you better have a license, cuz you are driving me crazy', 5, '#990000'],
              ['If beauty were measured in seconds, you would be an hour!', 7, '#ff3333'],
              ['Are you Sweadish? cuz you are the sweetish girl I have met!', 2, '#ff9999']
            ]);

            var options = {title:'Pick Up Line Success Rate (%)',
                           width:800,
                           height:600,
                           backgroundColor: {strokeWidth:3},
                           cssClassNames: {headerCell: 'googleHeaderCell'}};

            var chart = new google.visualization.ColumnChart(document.getElementById('pick_up'));
            chart.draw(data, options);
          }
      </pre>
    </div>
  </div>
</div>
