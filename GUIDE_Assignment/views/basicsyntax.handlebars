<div class="container-fluid">
  <div class="row">
    <div class="col-sm-3 col-md-2 sidebar">
      <ul class="nav nav-sidebar" margin-top=20px>
        <li><a href="/intro">Introduction</a></li>
        <li class="active"><a href="/basicsyntax">Basic Syntax <span class="sr-only">(current)</span></a></li>
        <li><a href="/api">API Integration</a></li>
        <li><a href="/interactive">Interactive Charts</a></li>
        <li><a href="/interactiveapi">Interactive API Example</a></li>
      </ul>
    </div>
    <div class="col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main">
      <h1 class="page-header">Basic Syntax for Google Charts</h1>
      <p>Jumping straight into API integration and chart interactivity will not go smoothly without a 
      a brief understanding of the overall Google Chart API. In this section, I will be walking you 
      through the creation of a simple pie chart. This will involve loading the API, organizing some data,
      selecting some options, and finally drawing the chart. In the end, you will have the tools to create
      the simple pie chart displayed below.</p>
      <div id="food_chart">
      </div>
      <h2 class="sub-header">Underlying Code</h2>
      <p>I'm going to start by providing all of the code used to produce the chart above. It's good to see 
      the big picture before we break down each individual piece.</p>
      <h3 class="sub-header">Javascript to be placed in HTML header</h3>
      <pre class="prettyprint lang-js linenums">
        /* Basic chart preperation files that must be included. 
        For different chart types additional packages must be added.
        For older versions of Google Chart releases, 'current' must be changed */
        google.charts.load('current', {packages: ['corechart']});

        /* This defines the "call back" function once the page loads
        Change drawChart to the function you create */
        google.charts.setOnLoadCallback(drawChart);

        /* This controls all of the main functionality of the chart. 
        You will organize your data, select your chart options, and draw 
        the chart using this function */
        function drawChart() {

          // Create the data you want to include in your chart
          var data = new google.visualization.arrayToDataTable([
            ['Restaurant', 'Count'],
            ['Tutta Bella', 1],
            ['Sushi Mio', 3],
            ['Chipotle', 7],
            ['Thai Truck', 5],
            ['Jimmy Johns', 2],
            ['Chic-fil-a', 11]
          ]);

          // Set options for how the chart will be displayed
          var options = {title:'Places I Have Eaten Lunch This Month',
                         width:450,   // Width of chart
                         height:300,  // Height of chart
                         backgroundColor: {strokeWidth:3}}  // Put a border around the chart

          /* This line does several things:
          1) Creates a Google Chart and assigns it to a variable
          2) Designates the chart type (PieChart in this case)
          3) Indicates which HTML element will display the chart (food_chart in this case) */
          var chart = new google.visualization.PieChart(document.getElementById('food_chart'));
          
          // This line draws the chart using the data and options designated above
          chart.draw(data, options);
        }
      </pre>
      <h3 class="sub-header">HTML needed in body (really, that is it)</h3>
      <pre class="prettyprint lang-html linenums">
        &ltdiv id="food_chart"&gt
        &lt/div&gt
      </pre>
      <h2 class="sub-header">Breaking Down the Code</h2>
      <h3 class="sub-header">Loading the Google Chart API</h3>
      <p>The first step to creating a Google Chart image is loading the API. There are two lines 
      that must be included in the header file of your HTML to make this possible.</p>
      <pre class="prettyprint lang-js linenums">
        // Loads the Google Chart API
        google.charts.load('current', {packages: ['corechart']});

        // Define call back function once page loads
        google.charts.setOnLoadCallback(drawChart);
      </pre>
      <p>The first line above loads the core Google Chart functionality. It defines which packages
      we want (which controls which charts will be available to us), and also informs Google which
      version we are looking for.</p> 
      <p>We can modify the charts available to us by adding additional packages. We can also modify
      the version number of our charts (Google updates the styling periodically), which will ensure
      the charts don't change style over time. A Google Chart loading line that hard codes the version
      number and requests access to corecharts and tables, would appear as follows:</p>
      <pre class="prettyprint lang-js linenums">
        google.charts.load('42', {packages: ['corechart', 'tables']});
      </pre>
      <p>The second line in the code snippet indicates the function that should be run after the chart
      is loaded. The only modification here is changing the function passed into the formula. Make sure
      this matches the function you write from the next section</p>
      <h3 class="sub-header">Creating the Call Back Function</h3>
      <p>Now that we have taken care of the basic Google Chart API code, we can get into the meat that 
      really controls what the chart looks like. There are three main portions to this code:<p>
      <ul>
        <li>Data</li>
        <li>Options</li>
        <li>Chart Creation and Draw Function</li>
      </ul>
      <h4 class="sub-header">Data</h4>
      <p>The data portion of the code creates a variable that stores the data for the chart. There are 
      multiple ways to pass data to this variable, but we will focus on the method where it is provided
      as an array of arrays. The inner arrays contain the data for each line of a <q>table.</q> The first
      inner array contains the header information, which is essentially the name of the data that will follow.
      The following inner arrays contain the data that should be graphed (the elements that make up your content).
      An example of a data variable decleration is seen below. Notice that the first inner array contains the 
      header information for the data ('Video Game' and 'Sales').</p>
      <pre class="prettyprint lang-js linenums">
        // Create the data you want to include in your chart
        var data = new google.visualization.arrayToDataTable([
          ['Video Game', 'Sales'],
          ['Halo 5', 121],
          ['The Division', 56],
          ['Gears of War X', 27],
        ]);
      </pre>
      
      <h4 class="sub-header">Options</h4>
      <p>Options are where you get to take control of your chart! This is the most important section for styling
      your chart. Think of it as the CSS of Google Charts (a lot of the naming conventions are similair).The four
      major things you will almost always want to style are the title of the chart, the width, the height, and the
      border style. The code below shows the syntax for creating those four options. They are name-value pairs 
      seperated by commas. You will almost always want to specify the width and height of your chart so that it
      fits naturally in the space you want it to, and properly displays text (if too small, it will truncate text).</p>
      <pre class="prettyprint lang-js linenums">
        // Set options for how the chart will be displayed
        var options = {title:'Places I Have Eaten Lunch This Month',
                       width:450,   // Width of chart
                       height:300,  // Height of chart
                       backgroundColor: {strokeWidth:3}}  // Put a border around the chart

      </pre>
      <h4 class="sub-header">Chart Creation and Draw Function</h4>
      <p>The final step is to actually draw the chart (yay!!!). The first line creates a new google chart, and
      indicates two key paramaters:</p>
      <ol>
        <li>Chart Type: PieChart</li>
        <li>HTML Target: food_chart</li>
      </ol>
      <p>The first item indicates the type of chart we are graphing. It could be a ColumnChart, a BarChart, 
      or numerous other chart types detailed on <a href="https://developers.google.com/chart/interactive/docs/">Google's Guide</a>.
      The second item indicates the HTML item we want to target as the container for our chart. As seen at the start of this page,
      I've created a div with the ID food_chart that will hold our chart.</p>
      <p>The last part of this code snippit contains the draw function. This function takes in the data we generated earlier, and 
      the options we specified, and actually creates the chart. After this line is executed, the chart will appear in the specified
      HTML element.</p>
      <pre class="prettyprint lang-js linenums">
        /* Chart variable creation
        var chart = new google.visualization.PieChart(document.getElementById('food_chart'));
        
        // Draw chart using data and options
        chart.draw(data, options);
      </pre>
      <h2 class="sub-header">Next Steps</h2>
      <p>Now that you know how to create a basic chart, I suggest getting some practice modifying
      the data and options from the code snippit at the top of the page. Get a chart working
      and then change it to a barChart that is double the width and height for example. Get comfortable
      with the general chart format now, because it will get slightly more complicated once we incorporate
      an API call in the next section<p>
      <p><a href="/api">API Integration</a><p>
    </div>
  </div>
</div>
