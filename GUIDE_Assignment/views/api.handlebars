<div class="container-fluid">
  <div class="row">
    <div class="col-sm-3 col-md-2 sidebar">
      <ul class="nav nav-sidebar" margin-top=20px>
        <li><a href="/intro">Introduction</a></li>
        <li><a href="/basicsyntax">Basic Syntax <span class="sr-only">(current)</span></a></li>
        <li class="active"><a href="/api">API Integration <span class="sr-only">(current)</span></a></li>
        <li><a href="/interactive">Interactive Charts</a></li>
        <li><a href="/interactiveapi">Interactive API Example</a></li>
      </ul>
    </div>
    <div class="col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main">
      <h1 class="page-header">API Integration</h1>
      <p>To make Google Charts truly useful, you need to bring in some data (nobody wants to 
      hard code a website constantly). In this section we are going to run through an example
      using the Yahoo Stock API. This API doesn't have very good documentation (really none at all),
      so some of my guide will be explaining how it works at a high level.</p>
      <h2 class="page-header">Retrieving the API Information</h2>
      <p>The code snippit below is the entire function in Express that calls the Yahoo API, and formats
      the data that will be passed to Google Charts. I'm assuming you have a reasonable level of knowledge
      when it comes to <a href="http://howtonode.org/deploy-blog-to-heroku">Node.js</a> and 
      <a href="http://expressjs.com/en/guide/routing.html">Express</a>, so I will only be focusing on the 
      non boiler-plate code.</p>
      <pre class="prettyprint lang-js linenums">
        app.get('/api', function(req, res, next) {
          var input = {};
          // Provide the javascript file to reference
          input.javascriptfile = "/js/api.js";
          request('http://finance.yahoo.com/webservice/v1/symbols/AAPL/quote?format=json&view=detail', function(err, response, body) {
            if(!err && response.statusCode < 400) {
              // Parse returned content
              var info = JSON.parse(body);
              
              // Parse out the fields that we want to variables
              // Number() and toFixed() used to create two decimal point number
              input.one = info.list.resources[0].resource.fields.name;
              var temp = info.list.resources[0].resource.fields.day_low;
              input.two = Number(temp).toFixed(2);
              temp = info.list.resources[0].resource.fields.price;
              input.three = Number(temp).toFixed(2);
              temp = info.list.resources[0].resource.fields.day_high;
              input.four = Number(temp).toFixed(2);

              // Render the page using the provided inputs
              res.render('api', input);
            } else {
              if(response) {
               console.log(response.statusCode);
              }
              next(err);
            }
          });
        });
      </pre>
      <p>Not a lot of code, right? Well I'm going to break down the important parts by line number in the list below:<p>
      <ul>
        <li>Line 2: The input object will store the items passed to Google Charts.</li>
        <li>Line 8: We parse the JSON information provided in the body that the API returns.</li>
        <li>Line 12: We assign "input.one" the value of the name field returned by the Yahoo Stock API. This is the stock name.</li>
        <li>Line 13-14: We retrieve the daily low price of the stock and assign it to a temporary variable. This temporary 
            variable is then converted to a number with two decimal places, using Number() and .toFixed(2). This is then stored
            in "input.two."</li>
        <li>Line 15-16: Perform the same task as above, but store the current price in "input.three."</li>
        <li>Line 17-18: Perform the same task as above, but store the daily high price in "input.four."</li>
        <li>Line 21: Render the API page by passing in the input variable we just populated in the lines above.</li>
      </ul>
      <p>Woah! That was a lot of parsing. You can view the underlying JSON I'm parsing by vising this URL:
      <a href="http://finance.yahoo.com/webservice/v1/symbols/AAPL/quote?format=json&view=detail">
      http://finance.yahoo.com/webservice/v1/symbols/AAPL/quote?format=json&view=detail</a>. Now that we have organized
      our input data into a format that we can reference by our page, we are going to take a look at how that information
      is being passed to the Google Charts API.</p>
      
      <h2 class="page-header">Retrieving the API Information</h2>
      <div id="api_chart"></div>
    </div>
  </div>
</div>
