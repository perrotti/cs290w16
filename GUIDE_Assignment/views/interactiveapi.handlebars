<div class="container-fluid">
  <div class="row">
    <div class="col-sm-3 col-md-2 sidebar">
      <ul class="nav nav-sidebar" margin-top=20px>
        <li><a href="/intro">Introduction</a></li>
        <li><a href="/basicsyntax">Basic Syntax</a></li>
        <li><a href="/api">API Integration</a></li>
        <li class="active"><a href="/interactive">Interactive Charts<span class="sr-only">(current)</span></a></li>
        <li><a href="/interactiveapi">Interactive API Example</a></li>
      </ul>
    </div>
    <div class="col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main">
      <h1 class="page-header">Interactive Charts</h1>
      <p>Now that we have charts that display information, what if we want to modify them? In this section we will
      briefly look at how to create a chart that can be modified via a pair of buttons. One button will decrease
      the size of our ColumnChart, while the other will grow it. We will also briefly touch on how these actions
      can be animated, to provide a slick look to the UI.</p>
      
      <h2 class="page-header">Creating an Interactive Chart</h2>
      <h3 class="page-header">The HTML</h3>
      <p>The first step to creating our Google Chart that will adjust to user interaction, is adding the necessary HTML.
      As seen below in the code snippet, in addition to the standard div for displaying the chart, a pair of buttons have
      been added. These buttons will be referenced by the javascript that creates the Google Chart, and will enable
      the user interaction.</p>
      <pre class="prettyprint lang-html linenums">
        &ltdiv id="interactive_chart"&gt&lt/div&gt
        &ltbutton id="button_down"&gtDown&lt/button&gt
        &ltbutton id="button_up"&gtUp&lt/button&gt
      </pre>
      
      <h3 class="page-header">The Javascript</h3>
      <p>Now that the minor HTML portion is out of the way, we can get to the meat and potatoes of this interactivity meal. 
      The javascript builds upon what we already know about Google Charts, but adds in some other syntax. I've provided the
      entire javascript code sample below, but just like previous sections, I'm going to walk through the changes line by line.</p>
      <pre class="prettyprint lang-js linenums">
        google.charts.load('current', {packages: ['corechart']});
        google.charts.setOnLoadCallback(init);

        // Wrapped code in init() function. Called by the Google Charts call back function
        function init() {
          var data = new google.visualization.arrayToDataTable([
            ['Candy', 'Count'],
            ['Skittles', 250]
          ]);

          /* Moved data, options, button, and chart decleration outside of drawChart, because drawChart will be called 
          multiple times. These variables should stay constant unless modified by our buttons */
          var options = {title:'Skittles I Want to Eat',
                         width:450,   // Width of chart
                         height:450,  // Height of chart
                         // Necessary to create animations when changing values
                         animation: {
                            duration: 1000, // in ms
                            easing: 'out' // Start fast then slow down on animation
                         },
                         backgroundColor: {strokeWidth:3}};  // Put a border around the chart

          var chart = new google.visualization.ColumnChart(document.getElementById('interactive_chart'));
          var upButton = document.getElementById('button_up');
          var downButton = document.getElementById('button_down');

          function drawChart() {
            // Can't push buttons while chart draws
            upButton.disable = true;
            downButton.disable = true;
            // Listen for the chart to finish loading, then enable buttons
            google.visualization.events.addListener(chart, 'ready', function() {
              upButton.disable = false;
              downButton.disable = false;
            });
            chart.draw(data, options);
          }

          // Add listener that modifies chart value when up button clicked
          upButton.onclick = function() {
            if (data.getValue(0, 1) < 10000) {
              var newCount = data.getValue(0, 1) + 50;
              data.setValue(0, 1, newCount);
              drawChart();
            }
          }

          // Add listener that modifies chart values when down button clicked
          downButton.onclick = function() {
            if (data.getValue(0, 1) > 0) {
              var newCount = data.getValue(0, 1) - 50;
              data.setValue(0, 1, newCount);
              drawChart();
            }
          }

          // Initial call to drawChart() when page loads
          drawChart();
        }
      </pre>
      <p>You can probably quickly pick out the differences between the static and interactive code, but we will walk through 
      each line just to make sure it is obvious what is taking place.</p>
      <ul>
        <li><strong>Line 2:</strong> The google charts call back function now points to the init() function instead of drawChart(). 
                    This is because we need to ensure the entire page is loaded, before we start declaring variables that impact 
                    the DOM (buttons). If we don't wait, the system will kick back errors when trying to produce the chart.</li>
        <li><strong>Line 5:</strong> The init() function that contains most of our chart code.</li>
        <li><strong>Line 17-20:</strong> Several new options were added to the chart. These options enable animation when 
                    changing chart values. The animation style section in this code contains duration and easing. Duration is 
                    in ms, and determines how long it will take for the chart to animate changes. Ease allows us to modify 
                    how the chart uses that time. In this case 'out' represents that it will start quickly then slow down as 
                    it reaches the new state.</li>
        <li><strong>Line 24-25:</strong> Created two variables that reference our up and down buttons from the HTML. These will
                    be used to react to a user clicking a button.</li>
        <li><strong>Line 29-30:</strong> Inside the drawChart function I have disabled the buttons. We don't want the buttons
                    reacting to clicks until the initial chart is created.</li>
        <li><strong>Line 32-36:</strong> Google Charts has a built in listener that returns ready when a chart is loaded. Once
                    this listener has been triggered, I'm enabling the buttons so that the user can start using them. I am then
                    drawing the chart the same way we are used to.</li>
        <li><strong>Line 40-46:</strong> This assigns a function to the up button upon being clicked. The IF statement checks to 
                    ensure the chart value isn't outside the max bound (in this case, 10,000). If it's within the bound, it uses 
                    data.getValue to retrieve the chart value and add 50 to it. It then uses data.setValue() to provide the new 
                    data point to our original data array. (Side note: setValue and getValue operate by passing in array positions 
                    for the values they want to change). Once this is complete, drawChart() is called, which will update the 
                    chart with the new data.</li>
        <li><strong>Line 49-55:</strong> This assigns a function to the down button upon being clicked. It works the same as the
                    up button, except it has a floor of 0 instead of the ceiling of 10,000. It updates the data array with the 
                    appropriate value then calls drawChart() to update the results.</li>
        <li><strong>Line 58:</strong> This is the initial call to drawChart() that is called outside of the onClick actions. 
                    This will ultimately call the function that creates the initial chart.</li>       
      </ul>
      
      <h3 class="page-header">The Finished Product</h3>
      <p>Below is the chart that was produced using the code above. With the code from this page as an example, you now have the ability 
      to modify your chart data in numerous ways. You could have one chart that serves the purpose of displaying data for multiple 
      different items even! Wait... that sounds like a great idea! Continue to the next page to see an integration of the Yahoo Stock API
      and Google Chart animations.</p>
      <div id="interactive_chart"></div>
      <button id="button_down">Down</button>
      <button id="button_up">Up</button>
      <br />
      <p><a href="/interactiveapi">Interactive API Example</a><p>
    </div>
  </div>
</div>
